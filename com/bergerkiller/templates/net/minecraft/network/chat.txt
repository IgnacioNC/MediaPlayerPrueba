package net.minecraft.network.chat;

import com.bergerkiller.generated.net.minecraft.network.chat.IChatBaseComponentHandle;

class IChatBaseComponent {
    // Method safely sets a modifier on a IChatBaseComponent, making it mutable if required
#if version >= 1.18
    #require net.minecraft.network.chat.IChatBaseComponent public abstract IChatBaseComponent makeMutableAndSetChatModifier(ChatModifier modifier) {
        if (instance instanceof IChatMutableComponent) {
            return ((IChatMutableComponent) instance).withStyle(modifier);
        } else {
            return (new ChatComponentText("")).append(instance).withStyle(modifier);
        }
    }
#elseif version >= 1.16
    #require net.minecraft.network.chat.IChatBaseComponent public abstract IChatBaseComponent makeMutableAndSetChatModifier(ChatModifier modifier) {
        if (instance instanceof IChatMutableComponent) {
            return ((IChatMutableComponent) instance).setChatModifier(modifier);
        } else {
            return (new ChatComponentText("")).addSibling(instance).setChatModifier(modifier);
        }
    }
#else
    #require net.minecraft.network.chat.IChatBaseComponent public abstract IChatBaseComponent makeMutableAndSetChatModifier:setChatModifier(ChatModifier modifier);
#endif

#if version >= 1.18
    public abstract String getText:getContents();
#else
    public abstract String getText();
#endif

#if version >= 1.18
    public (IChatBaseComponentHandle) IChatBaseComponent addSibling((IChatBaseComponentHandle) IChatBaseComponent sibling) {
        if (instance instanceof IChatMutableComponent) {
            return ((IChatMutableComponent) instance).append(sibling);
        } else {
            return instance.copy().append(sibling);
        }
    }
#elseif version >= 1.16
    public (IChatBaseComponentHandle) IChatBaseComponent addSibling((IChatBaseComponentHandle) IChatBaseComponent sibling) {
        if (instance instanceof IChatMutableComponent) {
            return ((IChatMutableComponent) instance).addSibling(sibling);
        } else {
            return instance.mutableCopy().addSibling(sibling);
        }
    }
#else
    public (IChatBaseComponentHandle) IChatBaseComponent addSibling((IChatBaseComponentHandle) IChatBaseComponent sibling);
#endif

    public boolean isMutable() {
#if version >= 1.16
        return instance instanceof IChatMutableComponent;
#else
        return true;
#endif
    }

#select version >=
#case 1.18:    public abstract (IChatBaseComponentHandle) IChatMutableComponent createCopy:copy();
#case 1.16:    public abstract (IChatBaseComponentHandle) IChatMutableComponent createCopy:mutableCopy();
#case 1.13.1:  public abstract (IChatBaseComponentHandle) IChatBaseComponent createCopy:h();
#case 1.13:    public abstract (IChatBaseComponentHandle) IChatBaseComponent createCopy:e();
#case else:    public abstract (IChatBaseComponentHandle) IChatBaseComponent createCopy:f();
#endselect

    public (IChatBaseComponentHandle) IChatBaseComponent setClickableURL(String url) {
#if version >= 1.18
        ChatModifier modifier = instance.getStyle();
        modifier = modifier.withClickEvent(new ChatClickable(ChatClickable$EnumClickAction.OPEN_URL, url));
#else
        ChatModifier modifier = instance.getChatModifier();
        modifier = modifier.setChatClickable(new ChatClickable(ChatClickable$EnumClickAction.OPEN_URL, url));
#endif
        return instance#makeMutableAndSetChatModifier(modifier);
    }

    public (IChatBaseComponentHandle) IChatBaseComponent setClickableContent(String content) {
#if version >= 1.15
  #if version >= 1.18
        ChatModifier modifier = instance.getStyle();
        modifier = modifier.withClickEvent(new ChatClickable(ChatClickable$EnumClickAction.COPY_TO_CLIPBOARD, content));
  #else
        ChatModifier modifier = instance.getChatModifier();
        modifier = modifier.setChatClickable(new ChatClickable(ChatClickable$EnumClickAction.COPY_TO_CLIPBOARD, content));
  #endif
        return instance#makeMutableAndSetChatModifier(modifier);
#else
        // Feature is since 1.15, do nothing on older versions
        return instance;
#endif
    }

    public (IChatBaseComponentHandle) IChatBaseComponent setClickableSuggestedCommand(String command) {
#if version >= 1.18
        ChatModifier modifier = instance.getStyle();
        modifier = modifier.withClickEvent(new ChatClickable(ChatClickable$EnumClickAction.SUGGEST_COMMAND, command));
#else
        ChatModifier modifier = instance.getChatModifier();
        modifier = modifier.setChatClickable(new ChatClickable(ChatClickable$EnumClickAction.SUGGEST_COMMAND, command));
#endif
        return instance#makeMutableAndSetChatModifier(modifier);
    }

    public (IChatBaseComponentHandle) IChatBaseComponent setClickableRunCommand(String command) {
#if version >= 1.18
        ChatModifier modifier = instance.getStyle();
        modifier = modifier.withClickEvent(new ChatClickable(ChatClickable$EnumClickAction.RUN_COMMAND, command));
#else
        ChatModifier modifier = instance.getChatModifier();
        modifier = modifier.setChatClickable(new ChatClickable(ChatClickable$EnumClickAction.RUN_COMMAND, command));
#endif
        return instance#makeMutableAndSetChatModifier(modifier);
    }

    public (IChatBaseComponentHandle) IChatBaseComponent setHoverText((IChatBaseComponentHandle) IChatBaseComponent hoverText) {
#if version >= 1.18
        ChatModifier modifier = instance.getStyle();
        modifier = modifier.withHoverEvent(new ChatHoverable(ChatHoverable$EnumHoverAction.SHOW_TEXT, hoverText));
#else
        ChatModifier modifier = instance.getChatModifier();
        modifier = modifier.setChatHoverable(new ChatHoverable(ChatHoverable$EnumHoverAction.SHOW_TEXT, hoverText));
#endif
        return instance#makeMutableAndSetChatModifier(modifier);
    }

    class IChatBaseComponent.ChatSerializer {
#if version >= 1.18
        public static String chatComponentToJson:toJson((IChatBaseComponentHandle) IChatBaseComponent chatComponent);
#else
        public static String chatComponentToJson:a((IChatBaseComponentHandle) IChatBaseComponent chatComponent);
#endif

#if version >= 1.18
        public static (IChatBaseComponentHandle) IChatMutableComponent jsonToChatComponent:fromJson(String jsonString);
#elseif version >= 1.16
        public static (IChatBaseComponentHandle) IChatMutableComponent jsonToChatComponent:a(String jsonString);
#else
        public static (IChatBaseComponentHandle) IChatBaseComponent jsonToChatComponent:a(String jsonString);
#endif

        public static (IChatBaseComponentHandle) IChatBaseComponent empty() {
            return new ChatComponentText("");
        }

#if version >= 1.18
        public static (IChatBaseComponentHandle) IChatBaseComponent modifiersToComponent(java.util.Collection<org.bukkit.ChatColor> colors) {
            ChatModifier initial_modifier = ChatModifier.EMPTY;
            ChatModifier modifier = initial_modifier;
            java.util.Iterator iter = colors.iterator();
            while (iter.hasNext()) {
                org.bukkit.ChatColor color = (org.bukkit.ChatColor) iter.next();
                if (color == org.bukkit.ChatColor.RESET) {
                    modifier = initial_modifier;
                } else if (color == org.bukkit.ChatColor.BOLD) {
                    modifier = modifier.withBold(Boolean.TRUE);
                } else if (color == org.bukkit.ChatColor.ITALIC) {
                    modifier = modifier.withItalic(Boolean.TRUE);
                } else if (color == org.bukkit.ChatColor.STRIKETHROUGH) {
                    modifier = modifier.withStrikethrough(Boolean.TRUE);
                } else if (color == org.bukkit.ChatColor.UNDERLINE) {
                    modifier = modifier.withUnderlined(Boolean.TRUE);
                } else if (color == org.bukkit.ChatColor.MAGIC) {
                    modifier = modifier.withObfuscated(Boolean.TRUE);
                } else {
                    modifier = initial_modifier.withColor(org.bukkit.craftbukkit.util.CraftChatMessage.getColor(color));
                }
            }
            return new ChatComponentText("").withStyle(modifier);
        }
#elseif version >= 1.16
        // ChatModifier is immutable since 1.16
        public static (IChatBaseComponentHandle) IChatBaseComponent modifiersToComponent(java.util.Collection<org.bukkit.ChatColor> colors) {
  #if version >= 1.17
            ChatModifier initial_modifier = ChatModifier.EMPTY;
  #elseif version >= 1.16.2
            ChatModifier initial_modifier = ChatModifier.a;
  #else
            ChatModifier initial_modifier = ChatModifier.b;
  #endif

            ChatModifier modifier = initial_modifier;
            java.util.Iterator iter = colors.iterator();
            while (iter.hasNext()) {
                org.bukkit.ChatColor color = (org.bukkit.ChatColor) iter.next();
                if (color == org.bukkit.ChatColor.RESET) {
                    modifier = initial_modifier;
                } else if (color == org.bukkit.ChatColor.BOLD) {
                    modifier = modifier.setBold(Boolean.TRUE);
                } else if (color == org.bukkit.ChatColor.ITALIC) {
                    modifier = modifier.setItalic(Boolean.TRUE);
                } else if (color == org.bukkit.ChatColor.STRIKETHROUGH) {
                    modifier = modifier.setStrikethrough(Boolean.TRUE);
                } else if (color == org.bukkit.ChatColor.UNDERLINE) {
                    modifier = modifier.setUnderline(Boolean.TRUE);
                } else if (color == org.bukkit.ChatColor.MAGIC) {
                    modifier = modifier.setRandom(Boolean.TRUE);
                } else {
                    modifier = initial_modifier.setColor(org.bukkit.craftbukkit.util.CraftChatMessage.getColor(color));
                }
            }
            return new ChatComponentText("").setChatModifier(modifier);
        }
#else
        public static (IChatBaseComponentHandle) IChatBaseComponent modifiersToComponent(java.util.Collection<org.bukkit.ChatColor> colors) {
            ChatModifier modifier = new ChatModifier();
            java.util.Iterator iter = colors.iterator();
            while (iter.hasNext()) {
                org.bukkit.ChatColor color = (org.bukkit.ChatColor) iter.next();
                if (color == org.bukkit.ChatColor.RESET) {
                    modifier = new ChatModifier();
                } else if (color == org.bukkit.ChatColor.BOLD) {
                    modifier.setBold(Boolean.TRUE);
                } else if (color == org.bukkit.ChatColor.ITALIC) {
                    modifier.setItalic(Boolean.TRUE);
                } else if (color == org.bukkit.ChatColor.STRIKETHROUGH) {
                    modifier.setStrikethrough(Boolean.TRUE);
                } else if (color == org.bukkit.ChatColor.UNDERLINE) {
                    modifier.setUnderline(Boolean.TRUE);
                } else if (color == org.bukkit.ChatColor.MAGIC) {
                    modifier.setRandom(Boolean.TRUE);
                } else {
                    modifier = new ChatModifier();
  #if version >= 1.12
                    modifier.setColor(org.bukkit.craftbukkit.util.CraftChatMessage.getColor(color));
  #else
                    #require org.bukkit.craftbukkit.util.CraftChatMessage.StringMessage private static final java.util.Map<Character, net.minecraft.server.EnumChatFormat> formatMap;
                    java.util.Map formats = #formatMap;
                    Object format = formats.get(Character.valueOf(color.getChar()));
                    modifier.setColor((EnumChatFormat) format);
  #endif
                }
            }
            return new ChatComponentText("").setChatModifier(modifier);
        }
#endif
    }
}

// version >= 1.12
optional class ChatMessageType {
#if version >= 1.18
    public byte getId:getIndex();
    public static (Object) ChatMessageType getRawById:getForIndex(byte id);
#else
    public byte getId:a();
    public static (Object) ChatMessageType getRawById:a(byte id);
#endif
}
