package net.minecraft.network.syncher;

import net.minecraft.world.entity.Entity;

import com.bergerkiller.generated.net.minecraft.world.entity.EntityHandle;
import com.bergerkiller.generated.net.minecraft.network.syncher.DataWatcherHandle;
import com.bergerkiller.generated.net.minecraft.network.syncher.DataWatcherHandle.ItemHandle;
import com.bergerkiller.generated.net.minecraft.network.syncher.DataWatcherObjectHandle;

class DataWatcher {
#if version >= 1.14.4
    private final (EntityHandle) Entity owner:entity;
#elseif version >= 1.10.2
    private final (EntityHandle) Entity owner:c;
#elseif version >= 1.9
    private final (EntityHandle) Entity owner:b;
#else
    private final (EntityHandle) Entity owner:a;
#endif

    public (DataWatcherHandle) DataWatcher((EntityHandle) Entity owner);

    <code>
    public static DataWatcherHandle createNew(org.bukkit.entity.Entity owner) {
        return createHandle(T.constr_owner.raw.newInstance(com.bergerkiller.bukkit.common.conversion.type.HandleConversion.toEntityHandle(owner)));
    }
    </code>

    /*
     *  } else if (this.d.containsKey(Integer.valueOf(i))) {
     *      throw new IllegalArgumentException("Duplicate id value for " + i + "!");
     #  } else if (DataWatcherRegistry.b(datawatcherobject.##METHODNAME##()) < 0) {
     *      throw new IllegalArgumentException("Unregistered serializer " + datawatcherobject.b() + " for " + i + "!");
     *  } else {
     */
#if version >= 1.18
    public (List<com.bergerkiller.bukkit.common.wrappers.DataWatcher.Item<?>>) List<DataWatcher.Item<?>> unwatchAndReturnAllWatched:packDirty();
#elseif version >= 1.9
    public (List<com.bergerkiller.bukkit.common.wrappers.DataWatcher.Item<?>>) List<DataWatcher.Item<?>> unwatchAndReturnAllWatched:b();
#else
    public (List<com.bergerkiller.bukkit.common.wrappers.DataWatcher.Item<?>>) List<DataWatcher.WatchableObject> unwatchAndReturnAllWatched:b();
#endif

    /*
     * Same signature as unwatchAndReturnAllWatched, find other function that matches
     */
#if version >= 1.17
    public (List<com.bergerkiller.bukkit.common.wrappers.DataWatcher.Item<?>>) List<DataWatcher.Item<?>> returnAllWatched:getAll();
#elseif version >= 1.9
    public (List<com.bergerkiller.bukkit.common.wrappers.DataWatcher.Item<?>>) List<DataWatcher.Item<?>> returnAllWatched:c();
#else
    public (List<com.bergerkiller.bukkit.common.wrappers.DataWatcher.Item<?>>) List<DataWatcher.WatchableObject> returnAllWatched:c();
#endif

#if version >= 1.18
    private (com.bergerkiller.bukkit.common.wrappers.DataWatcher.Item<T>) DataWatcher.Item<T> read:getItem((com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key<?>) DataWatcherObject<T> key);
#elseif version >= 1.13
    private (com.bergerkiller.bukkit.common.wrappers.DataWatcher.Item<T>) DataWatcher.Item<T> read:b((com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key<?>) DataWatcherObject<T> key);
#elseif version >= 1.9
    private (com.bergerkiller.bukkit.common.wrappers.DataWatcher.Item<T>) DataWatcher.Item<T> read:c((com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key<?>) DataWatcherObject<T> key);
#else
    private (com.bergerkiller.bukkit.common.wrappers.DataWatcher.Item<?>) DataWatcher.WatchableObject read:j((com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key<?>) int key);
#endif

    public void register(com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key<?> key, Object defaultValue) {
        if (key == null) {
            throw new IllegalArgumentException("key is null");
        }
#if version >= 1.18
        #require net.minecraft.network.syncher.DataWatcher private void register:define(DataWatcherObject<T> key, Object defaultValue);
#elseif version >= 1.9
        #require net.minecraft.network.syncher.DataWatcher private void register:registerObject(DataWatcherObject<T> key, Object defaultValue);
#else
        #require net.minecraft.network.syncher.DataWatcher private void register:a((DataWatcherObject<T>) int key, Object defaultValue);
#endif
        instance#register((DataWatcherObject) key.getRawHandle(), key.getType().getConverter().convertReverse(defaultValue));
    }

    public void set(com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key<?> key, Object value) {
        if (key == null) {
            throw new IllegalArgumentException("key is null");
        }
        Object convertedValue = key.getType().getConverter().convertReverse(value);
#if version >= 1.9
        instance.set((DataWatcherObject) key.getRawHandle(), convertedValue);
#else
        int id = ((com.bergerkiller.bukkit.common.internal.proxy.DataWatcherObject) key.getRawHandle()).getId();
        instance.watch(id, convertedValue);
#endif
    }

    public Object get(com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key<?> key) {
        if (key == null) {
            throw new IllegalArgumentException("key is null");
        }
#if version >= 1.9
        Object rawValue = instance.get((DataWatcherObject) key.getRawHandle());
#else
        com.bergerkiller.bukkit.common.wrappers.DataWatcher.Item item;
        Object itemRaw = com.bergerkiller.generated.net.minecraft.network.syncher.DataWatcherHandle.T.read.invoke(instance, key);
        item = (com.bergerkiller.bukkit.common.wrappers.DataWatcher.Item) itemRaw;
        Object rawValue = com.bergerkiller.bukkit.common.wrappers.DataWatcher.Item.getRawValue(item);
#endif
        return key.getType().getConverter().convert(rawValue);
    }

#if version >= 1.18
    public boolean isChanged:isDirty();
    public boolean isEmpty();
#else
    public boolean isChanged:a();
    public boolean isEmpty:d();
#endif

    class DataWatcher.Item {
#if version >= 1.17
        private optional final int typeId:###;
        private optional final int keyId:###;
        private optional final (com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key<?>) DataWatcherObject<T> key:accessor;
        private optional T value;
        private boolean changed:dirty;
#elseif version >= 1.9
        private optional final int typeId:###;
        private optional final int keyId:###;
        private optional final (com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key<?>) DataWatcherObject<T> key:a;
        private optional T value:b;
        private boolean changed:c;
#else
        private optional final int typeId:a;
        private optional final int keyId:b;
        private optional final (com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key<?>) DataWatcherObject<T> key:###;
        private optional Object value:c;
        private boolean changed:d;
#endif

        // Get/set value, use public methods for faster access
        // TODO: Verify it is actually faster than using reflection on the value field (!)
#if version >= 1.18
        public T getValue();
        public void setValue(T value);
#elseif version >= 1.9
        public T getValue:b();
        public void setValue:a(T value);
#else
        public Object getValue:b();
        public void setValue:a(Object value);
#endif

        // constructor for 1.9
        public optional (DataWatcherHandle.ItemHandle) DataWatcher.Item((com.bergerkiller.bukkit.common.wrappers.DataWatcher.Key<?>) DataWatcherObject<T> key, T value);

        // constructor for 1.8.8
        public optional (DataWatcherHandle.ItemHandle) DataWatcher.Item(int typeId, int keyId, Object value);

        <code>
        public DataWatcherHandle.ItemHandle cloneHandle() {
            Object clone;
            if (T.constr_key_value.isAvailable()) {
                Object rawKey = T.key.raw.get(getRaw());
                clone = T.constr_key_value.raw.newInstance(rawKey, this.getValue());
            } else {
                int typeId = T.typeId.getInteger(getRaw());
                int keyId = T.keyId.getInteger(getRaw());
                clone = T.constr_typeId_keyId_value.raw.newInstance(typeId, keyId, this.getValue());
            }
            T.changed.copy(getRaw(), clone);
            return createHandle(clone);
        }
        </code>
    }
}

class DataWatcherObject {
#if version >= 1.18
    public int getId();
    public (Object) DataWatcherSerializer<T> getSerializer()
#elseif version >= 1.9
    public int getId:a();
    public (Object) DataWatcherSerializer<T> getSerializer:b()
#else
    public int getId();
    public (Object) Object getSerializer:getSerializer()
#endif
}

optional class DataWatcherRegistry {
#if version >= 1.18
    public static int getSerializerId:getSerializedId((Object) DataWatcherSerializer<?> paramDataWatcherSerializer);
#else
    public static int getSerializerId:b((Object) DataWatcherSerializer<?> paramDataWatcherSerializer);
#endif
}