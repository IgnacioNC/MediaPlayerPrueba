package net.minecraft.network;

import com.google.common.collect.BiMap;
import net.minecraft.network.protocol.EnumProtocolDirection;

import com.bergerkiller.generated.net.minecraft.network.EnumProtocolHandle;
import com.bergerkiller.generated.net.minecraft.network.protocol.EnumProtocolDirectionHandle;

class EnumProtocol {
    enum (EnumProtocolHandle) EnumProtocol PLAY;

#if version >= 1.15
    // Is no longer a BiMap on 1.15
  #if version >= 1.17
    #require net.minecraft.network.EnumProtocol private final Map<net.minecraft.network.protocol.EnumProtocolDirection, ? extends net.minecraft.network.EnumProtocol.a<?>> packetMap:flows;
  #else
    #require net.minecraft.network.EnumProtocol private final Map<net.minecraft.network.protocol.EnumProtocolDirection, ? extends net.minecraft.network.EnumProtocol.a<?>> packetMap:h;
  #endif

    #require net.minecraft.network.EnumProtocol.a private final it.unimi.dsi.fastutil.objects.Object2IntMap<Class<? extends net.minecraft.network.protocol.Packet<T extends PacketListener>>> packetToIdMap:a;

#if version >= 1.18
    #require net.minecraft.network.EnumProtocol.a public Integer getPacketClassId:getId(Class<?> packetClass);
#else
    #require net.minecraft.network.EnumProtocol.a public Integer getPacketClassId:a(Class<?> packetClass);
#endif

    public Class<?> getPacketClassIn(int id) {
        Object map = (instance#packetMap).get(EnumProtocolDirection.SERVERBOUND);
        java.util.Iterator iter = (map#packetToIdMap).entrySet().iterator();
        while (iter.hasNext()) {
            java.util.Map$Entry e = (java.util.Map$Entry) iter.next();
            int packet_id = ((Integer) e.getValue()).intValue();
            if (packet_id == id) {
                return (Class) e.getKey();
            }
        }
        return null;
    }

    public Class<?> getPacketClassOut(int id) {
        Object map = (instance#packetMap).get(EnumProtocolDirection.CLIENTBOUND);
        java.util.Iterator iter = (map#packetToIdMap).entrySet().iterator();
        while (iter.hasNext()) {
            java.util.Map$Entry e = (java.util.Map$Entry) iter.next();
            int packet_id = ((Integer) e.getValue()).intValue();
            if (packet_id == id) {
                return (Class) e.getKey();
            }
        }
        return null;
    }

    public int getPacketIdIn(Class<?> packetClass) {
        Object map = (instance#packetMap).get(EnumProtocolDirection.SERVERBOUND);
        Integer id = map#getPacketClassId(packetClass);
        return (id == null) ? -1 : id.intValue();
    }

    public int getPacketIdOut(Class<?> packetClass) {
        Object map = (instance#packetMap).get(EnumProtocolDirection.CLIENTBOUND);
        Integer id = map#getPacketClassId(packetClass);
        return (id == null) ? -1 : id.intValue();
    }
#else
    // BiMap stores the PacketClass<>ID relationship
  #if version >= 1.10.2
    #require net.minecraft.network.EnumProtocol private final Map<net.minecraft.network.protocol.EnumProtocolDirection, BiMap<Integer, Class<? extends net.minecraft.network.protocol.Packet<?>>>> packetMap:h;
  #elseif version >= 1.9
    #require net.minecraft.network.EnumProtocol private final Map<net.minecraft.network.protocol.EnumProtocolDirection, BiMap<Integer, Class<? extends net.minecraft.network.protocol.Packet<?>>>> packetMap:j;
  #elseif version >= 1.8.3
    #require net.minecraft.network.EnumProtocol private final Map<net.minecraft.network.protocol.EnumProtocolDirection, BiMap<Integer, Class<? extends net.minecraft.network.protocol.Packet>>> packetMap:j;
  #else
    #require net.minecraft.network.EnumProtocol private final Map<net.minecraft.network.protocol.EnumProtocolDirection, BiMap<Integer, Class<? extends net.minecraft.network.protocol.Packet>>> packetMap:h;
  #endif

    public Class<?> getPacketClassIn(int id) {
        com.google.common.collect.BiMap map = (com.google.common.collect.BiMap) (instance#packetMap).get(EnumProtocolDirection.SERVERBOUND);
        return (Class) map.get(Integer.valueOf(id));
    }

    public Class<?> getPacketClassOut(int id) {
        com.google.common.collect.BiMap map = (com.google.common.collect.BiMap) (instance#packetMap).get(EnumProtocolDirection.CLIENTBOUND);
        return (Class) map.get(Integer.valueOf(id));
    }

    public int getPacketIdIn(Class<?> packetClass) {
        com.google.common.collect.BiMap map = ((com.google.common.collect.BiMap) (instance#packetMap).get(EnumProtocolDirection.SERVERBOUND)).inverse();
        Integer id = (Integer) map.get(packetClass);
        return (id == null) ? -1 : id.intValue();
    }

    public int getPacketIdOut(Class<?> packetClass) {
        com.google.common.collect.BiMap map = ((com.google.common.collect.BiMap) (instance#packetMap).get(EnumProtocolDirection.CLIENTBOUND)).inverse();
        Integer id = (Integer) map.get(packetClass);
        return (id == null) ? -1 : id.intValue();
    }
#endif
}
