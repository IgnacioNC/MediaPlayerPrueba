package net.minecraft.world.item;

import net.minecraft.core.NonNullList;
import net.minecraft.core.RegistryMaterials;
import net.minecraft.resources.MinecraftKey;

import com.bergerkiller.generated.net.minecraft.world.item.CreativeModeTabHandle;

class Item {
    public static Iterable<?> getRegistry() {
        // Must initialize the server to initialize the item-storing registries
        com.bergerkiller.bukkit.common.internal.CommonBootstrap.initServer();

#if version >= 1.14
        #require net.minecraft.core.IRegistry public static final net.minecraft.core.RegistryBlocks<net.minecraft.world.item.Item> REGISTRY:ITEM;
#elseif version >= 1.13.1
        #require net.minecraft.core.IRegistry public static final net.minecraft.core.IRegistry<net.minecraft.world.item.Item> REGISTRY:ITEM;
#else
        #require net.minecraft.world.item.Item public static final net.minecraft.core.RegistryMaterials<MinecraftKey, net.minecraft.world.item.Item> REGISTRY;
#endif
        return #REGISTRY;
    }

    public void setMaxStackSize(int maxStackSize) {
        #require net.minecraft.world.item.Item private final int maxStackSize;
        instance#maxStackSize = maxStackSize;
    }

    public int getMaxStackSize();

#if version >= 1.18
    public int getMaxDurability:getMaxDamage();
    public boolean usesDurability:canBeDepleted();
#else
    public int getMaxDurability();
    public boolean usesDurability();
#endif

#select version >=
#case 1.18:   public String getInternalName:getDescriptionId((org.bukkit.inventory.ItemStack) ItemStack itemstack);
#case 1.17:   public String getInternalName:j((org.bukkit.inventory.ItemStack) ItemStack itemstack);
#case 1.14:   public String getInternalName:f((org.bukkit.inventory.ItemStack) ItemStack itemstack);
#case 1.13:   public String getInternalName:h((org.bukkit.inventory.ItemStack) ItemStack itemstack);
#case 1.11:   public String getInternalName:a((org.bukkit.inventory.ItemStack) ItemStack itemstack);
#case 1.9:    public String getInternalName:f_((org.bukkit.inventory.ItemStack) ItemStack itemstack);
#case 1.8.6:  public String getInternalName:e_((org.bukkit.inventory.ItemStack) ItemStack itemstack);
#case 1.8.5:  public String getInternalName:f_((org.bukkit.inventory.ItemStack) ItemStack itemstack);
#case else:   public String getInternalName:e_((org.bukkit.inventory.ItemStack) ItemStack itemstack);
#endselect

#if version >= 1.18
    public (List<org.bukkit.inventory.ItemStack>) NonNullList<ItemStack> getItemVariants((CreativeModeTabHandle) CreativeModeTab creativemodetab) {
        NonNullList result = NonNullList.create();
        instance.fillItemCategory(creativemodetab, result);
        return result;
    }
#elseif version >= 1.12.1
    public (List<org.bukkit.inventory.ItemStack>) NonNullList<ItemStack> getItemVariants((CreativeModeTabHandle) CreativeModeTab creativemodetab) {
        NonNullList result = NonNullList.a();
        instance.a(creativemodetab, result);
        return result;
    }
#else
    public List<org.bukkit.inventory.ItemStack> getItemVariants((CreativeModeTabHandle) CreativeModeTab creativemodetab) {
        org.bukkit.Material type = com.bergerkiller.bukkit.common.conversion.type.WrapperConversion.toMaterialFromItemHandle(instance);
        java.util.ArrayList result = new java.util.ArrayList();
        com.bergerkiller.bukkit.common.internal.proxy.ItemVariants_pre_1_12_1.addVariants(type, result);
        return result;
    }
#endif
}

class CreativeModeTab {
#if version >= 1.17
    public static final (CreativeModeTabHandle) CreativeModeTab SEARCH:TAB_SEARCH;
#else
    public static final (CreativeModeTabHandle) CreativeModeTab SEARCH:g;
#endif
}
