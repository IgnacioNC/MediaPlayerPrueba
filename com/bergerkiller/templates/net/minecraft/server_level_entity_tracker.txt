package net.minecraft.server.level;

import net.minecraft.network.protocol.Packet;
import net.minecraft.server.network.ServerPlayerConnection;
import net.minecraft.world.entity.Entity;

import com.bergerkiller.generated.net.minecraft.world.entity.EntityHandle;
import com.bergerkiller.generated.net.minecraft.server.level.EntityTrackerEntryHandle;
import com.bergerkiller.generated.net.minecraft.server.level.EntityTrackerEntryStateHandle;
import com.bergerkiller.bukkit.common.protocol.CommonPacket;

// Same as PlayerChunkMap on MC 1.14 and later
class EntityTracker {
#if version >= 1.14
  #if version >= 1.17
    public final (org.bukkit.World) WorldServer world:level;
  #else
    public final (org.bukkit.World) WorldServer world;
  #endif

  #if version >= 1.17
    #require net.minecraft.server.level.EntityTracker public final it.unimi.dsi.fastutil.ints.Int2ObjectMap<PlayerChunkMap.EntityTracker> trackedEntities:entityMap;
  #else
    #require net.minecraft.server.level.EntityTracker public final it.unimi.dsi.fastutil.ints.Int2ObjectMap<PlayerChunkMap.EntityTracker> trackedEntities;
  #endif

    public (Collection<com.bergerkiller.generated.net.minecraft.server.level.EntityTrackerEntryHandle>) Collection<EntityTrackerEntry> getEntries() {
        return instance#trackedEntities.values();
    }

    public (EntityTrackerEntryHandle) EntityTrackerEntry getEntry(int entityId) {
        return (PlayerChunkMap$EntityTracker) instance#trackedEntities.get(entityId);
    }

    public (EntityTrackerEntryHandle) EntityTrackerEntry putEntry(int entityId, (EntityTrackerEntryHandle) EntityTrackerEntry entry) {
        it.unimi.dsi.fastutil.ints.Int2ObjectMap trackedEntities = instance#trackedEntities;
        if (entry == null) {
            return (PlayerChunkMap$EntityTracker) trackedEntities.remove(entityId);
        } else if (trackedEntities.getClass() == it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap.class) {
            return (PlayerChunkMap$EntityTracker) trackedEntities.put(entityId, entry);
        } else {
            // ProtocolSupport (or other hooks): bypass put() callback handler to guarantee it is put
            trackedEntities.remove(entityId);
            return (PlayerChunkMap$EntityTracker) trackedEntities.putIfAbsent(entityId, entry);
        }
    }

  #if exists net.minecraft.server.level.PlayerChunkMap.ProtectedVisibleChunksMap
    public optional void setVisibleChunksToUpdatingChunks:###();
  #elseif exists net.minecraft.server.level.PlayerChunkMap public volatile it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap<net.minecraft.server.level.PlayerChunk> visibleChunksClone;
    public optional void setVisibleChunksToUpdatingChunks() {
        // Used on newer builds of paperspigot
        synchronized (instance.visibleChunks) {
            instance.visibleChunksClone = null;
        }
    }
  #elseif exists net.minecraft.server.level.PlayerChunkMap public volatile it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap<net.minecraft.server.level.PlayerChunk> visibleChunks;
    public optional void setVisibleChunksToUpdatingChunks() {
        instance.visibleChunks = instance.updatingChunks;
    }
  #else
    public optional void setVisibleChunksToUpdatingChunks:###();
  #endif

#else
    #require net.minecraft.server.level.EntityTracker private final Set<EntityTrackerEntry> trackedEntitiesSet:c;

    private final (org.bukkit.World) WorldServer world;

    public (Collection<EntityTrackerEntryHandle>) Collection<EntityTrackerEntry> getEntries() {
        return instance#trackedEntitiesSet;
    }

    public (EntityTrackerEntryHandle) EntityTrackerEntry getEntry(int entityId) {
        return (EntityTrackerEntry) instance.trackedEntities.get(entityId);
    }

    public (EntityTrackerEntryHandle) EntityTrackerEntry putEntry(int entityId, (EntityTrackerEntryHandle) EntityTrackerEntry entry) {
        java.util.Set set = instance#trackedEntitiesSet;

        // Remove any previous entry
        EntityTrackerEntry previous = (EntityTrackerEntry) instance.trackedEntities.d(entityId);
        set.remove(previous);

        // Add the new entry
        if (entry != null) {
            instance.trackedEntities.a(entityId, (Object) entry);
            set.add(entry);
        }

        return previous;
    }

    public optional void setVisibleChunksToUpdatingChunks:###();

#endif

#if version >= 1.17
    int trackingDistance:viewDistance;
#elseif version >= 1.14.1
    private int trackingDistance:viewDistance;
#elseif version >= 1.14
    private int trackingDistance:A;
#elseif fieldexists net.minecraft.server.level.EntityTracker private int trackingDistance
    private int trackingDistance;
#else
    private int trackingDistance:e;
#endif

#if version >= 1.18
    protected void sendPacketToEntity:broadcastAndSend((org.bukkit.entity.Entity) Entity entity, (CommonPacket) Packet<?> packet);
#elseif version >= 1.14
    protected void sendPacketToEntity:broadcastIncludingSelf((org.bukkit.entity.Entity) Entity entity, (CommonPacket) Packet<?> packet);
#elseif version >= 1.9
    public void sendPacketToEntity((org.bukkit.entity.Entity) Entity entity, (CommonPacket) Packet<?> packet);
#else
    public void sendPacketToEntity((org.bukkit.entity.Entity) Entity entity, (CommonPacket) Packet packet);
#endif

#if version >= 1.14
  #if exists net.minecraft.server.level.PlayerChunkMap public void addEntity(net.minecraft.world.entity.Entity);
    public void trackEntity:addEntity((org.bukkit.entity.Entity) Entity entity);
  #else
    protected void trackEntity:addEntity((org.bukkit.entity.Entity) Entity entity);
  #endif

    protected void untrackEntity:removeEntity((org.bukkit.entity.Entity) Entity entity);
#else
    public void trackEntity:track((org.bukkit.entity.Entity) Entity entity);
    public void untrackEntity((org.bukkit.entity.Entity) Entity entity);
#endif

    // Also sends chunk data on 1.14 since the two got merged into one
    // On 1.13.2 and before, it just sends all packets required for spawning the entities in the chunk
    // public void spawnEntities:a((org.bukkit.entity.Player) EntityPlayer entityplayer, (org.bukkit.Chunk) Chunk chunk);
}

// Same as EntityTrackerEntry on 1.13.2 and before
// PlayerChunkMap.EntityTracker on 1.14 and later
class EntityTrackerEntry {
#if version >= 1.14
  #if version >= 1.17
    private final int trackingDistance:range;
  #else
    private final int trackingDistance;
  #endif

    public int getPlayerViewDistance() {
  #if exists net.minecraft.server.level.EntityTrackerEntry final net.minecraft.server.level.PlayerChunkMap this$0;
        #require net.minecraft.server.level.EntityTrackerEntry final net.minecraft.server.level.PlayerChunkMap entityTracker:this$0;
  #else
        #require net.minecraft.server.level.EntityTrackerEntry final net.minecraft.server.level.PlayerChunkMap entityTracker:a;
  #endif
  #if version >= 1.14.1
        #require net.minecraft.server.level.PlayerChunkMap private int playerViewDistance:viewDistance;
  #else
        #require net.minecraft.server.level.PlayerChunkMap private int playerViewDistance:A;
  #endif
        Object playerChunkMap = instance#entityTracker;
        return playerChunkMap#playerViewDistance;
    }
#elseif version >= 1.9
    private final int trackingDistance:e;

    public int getPlayerViewDistance() {
        #require net.minecraft.server.level.EntityTrackerEntry private int playerViewDistance:f;
        return instance#playerViewDistance;
    }
#else
    public int trackingDistance:b;

    public int getPlayerViewDistance() {
        return instance.b;
    }
#endif

#if version >= 1.17
    // Stores a set of ServerPlayerConnection objects, requires <> EntityPlayer conversion

    public (java.util.Collection<org.bukkit.entity.Player>) Set<ServerPlayerConnection> getViewers() {
        return instance.seenBy;
    }

    public void clearViewers() {
        instance.seenBy.clear();
    }

    public boolean addViewerToSet((org.bukkit.entity.Player) ServerPlayerConnection viewer) {
        return instance.seenBy.add(viewer);
    }

    public boolean removeViewerFromSet((org.bukkit.entity.Player) ServerPlayerConnection viewer) {
        return instance.seenBy.remove(viewer);
    }

#elseif fieldexists net.minecraft.server.level.EntityTrackerEntry public Map<EntityPlayer, Boolean> trackedPlayerMap;
    // Stored as a Map of players (Paperspigot)

    public (java.util.Collection<org.bukkit.entity.Player>) Set<EntityPlayer> getViewers() {
        return instance.trackedPlayerMap.keySet();
    }

    public void clearViewers() {
        instance.trackedPlayerMap.clear();
    }

    public boolean addViewerToSet((org.bukkit.entity.Player) EntityPlayer viewer) {
        if (instance.trackedPlayerMap.containsKey(viewer)) {
            return false;
        } else {
            instance.trackedPlayerMap.put(viewer, Boolean.TRUE);
            return true;
        }
    }

    public boolean removeViewerFromSet((org.bukkit.entity.Player) EntityPlayer viewer) {
        return instance.trackedPlayerMap.remove(viewer) != null;
    }
#else
    // Stored as a Set of players

    public (java.util.Collection<org.bukkit.entity.Player>) Set<EntityPlayer> getViewers() {
        return instance.trackedPlayers;
    }

    public void clearViewers() {
        instance.trackedPlayers.clear();
    }

    public boolean addViewerToSet((org.bukkit.entity.Player) EntityPlayer viewer) {
        return instance.trackedPlayers.add(viewer);
    }

    public boolean removeViewerFromSet((org.bukkit.entity.Player) EntityPlayer viewer) {
        return instance.trackedPlayers.remove(viewer);
    }
#endif

#if version >= 1.14
  #if version >= 1.17
    #require net.minecraft.server.level.PlayerChunkMap$EntityTracker private final net.minecraft.world.entity.Entity entity;
    #require net.minecraft.server.level.PlayerChunkMap$EntityTracker private final EntityTrackerEntryState trackerEntry:serverEntity;
    #require net.minecraft.server.level.EntityTrackerEntryState private final net.minecraft.world.entity.Entity trackerEntryEntity:entity;
  #else
    #require net.minecraft.server.level.PlayerChunkMap$EntityTracker private final net.minecraft.world.entity.Entity entity:tracker;
    #require net.minecraft.server.level.PlayerChunkMap$EntityTracker private final EntityTrackerEntryState trackerEntry;
    #require net.minecraft.server.level.EntityTrackerEntryState private final net.minecraft.world.entity.Entity trackerEntryEntity:tracker;
  #endif

    public (EntityTrackerEntryStateHandle) EntityTrackerEntryState getState() {
        return instance#trackerEntry;
    }

    public optional void setState((EntityTrackerEntryStateHandle) EntityTrackerEntryState state) {
        instance#trackerEntry = state;
    }

    public (EntityHandle) Entity getEntity() {
        return instance#entity;
    }

    public void setEntity((EntityHandle) Entity entity) {
        instance#entity = entity;
        EntityTrackerEntryState entry = instance#trackerEntry;
        entry#trackerEntryEntity = entity;
    }

  #if version >= 1.18
    public void scanPlayers:updatePlayers((List<org.bukkit.entity.Player>) List<EntityPlayer> playerList);
    public void removeViewer:removePlayer((org.bukkit.entity.Player) EntityPlayer player);
  #else
    public void scanPlayers:track((List<org.bukkit.entity.Player>) List<EntityPlayer> playerList);
    public void removeViewer:clear((org.bukkit.entity.Player) EntityPlayer player);
  #endif
#else
    #require net.minecraft.server.level.EntityTrackerEntry private final net.minecraft.world.entity.Entity entity:tracker;

    public (EntityTrackerEntryStateHandle) EntityTrackerEntryState getState() {
        return instance;
    }

    public optional void setState:###((EntityTrackerEntryStateHandle) EntityTrackerEntryState state);

    public (EntityHandle) Entity getEntity() {
        return instance#entity;
    }

    public void setEntity((EntityHandle) Entity entity) {
        instance#entity = entity;
    }

    public void scanPlayers((List<org.bukkit.entity.Player>) List<EntityHuman> playerList);
    public void removeViewer:a((org.bukkit.entity.Player) EntityPlayer player);
#endif

    public void updatePlayer((org.bukkit.entity.Player) EntityPlayer player);

#if version >= 1.18
    public void hideForAll:broadcastRemoved();
#else
    public void hideForAll:a();
#endif

    // These got moved to the State class, but proxy them here to keep depending plugins compatible
    <code>
    @Deprecated
    public static final boolean hasProtocolRotationChanged(float angle1, float angle2) {
        return EntityTrackerEntryStateHandle.hasProtocolRotationChanged(angle1, angle2);
    }

    @Deprecated
    public static final int getProtocolRotation(float angle) {
        return EntityTrackerEntryStateHandle.getProtocolRotation(angle);
    }

    @Deprecated
    public static final float getRotationFromProtocol(int protocol) {
        return EntityTrackerEntryStateHandle.getRotationFromProtocol(protocol);
    }

    @Deprecated
    public void setTimeSinceLocationSync(int time) {
        getState().setTimeSinceLocationSync(time);
    }
    </code>
}

// Alias for EntityTrackerEntry, but because we're using PlayerChunkMap$EntityTracker as
// main handle on 1.14 it is renamed to differentiate the two.
class EntityTrackerEntryState {
#if version >= 1.17
    private final (EntityHandle) Entity entity;

    private final int updateInterval;
    private final boolean isMobile:trackDelta;

    private optional final java.util.function.Consumer broadcastMethod:broadcast;

    private optional long long_xLoc:xp;
    private optional long long_yLoc:yp;
    private optional long long_zLoc:zp;
    private optional int int_xLoc:###;
    private optional int int_yLoc:###;
    private optional int int_zLoc:###;

    public int raw_xRot:yRotp;
    public int raw_yRot:xRotp;
    public int raw_headYaw:yHeadRotp;
#elseif version >= 1.14
    private final (EntityHandle) Entity entity:tracker;

    private final int updateInterval:d;
    private final boolean isMobile:e;

    private optional final java.util.function.Consumer broadcastMethod:f;

    private optional long long_xLoc:xLoc;
    private optional long long_yLoc:yLoc;
    private optional long long_zLoc:zLoc;
    private optional int int_xLoc:###;
    private optional int int_yLoc:###;
    private optional int int_zLoc:###;

    public int raw_xRot:yRot;
    public int raw_yRot:xRot;
    public int raw_headYaw:headYaw;
#elseif version >= 1.9
    private final readonly (EntityHandle) Entity entity:tracker;

    private final int updateInterval:g;

    private optional final java.util.function.Consumer broadcastMethod:###;

    private optional long long_xLoc:xLoc;
    private optional long long_yLoc:yLoc;
    private optional long long_zLoc:zLoc;
    private optional int int_xLoc:###;
    private optional int int_yLoc:###;
    private optional int int_zLoc:###;

    public int raw_xRot:yRot;
    public int raw_yRot:xRot;
    public int raw_headYaw:headYaw;
#else
    public final readonly (EntityHandle) Entity entity:tracker;

    public int updateInterval:c;

    private optional final java.util.function.Consumer broadcastMethod:###;

    public optional long long_xLoc:###;
    public optional long long_yLoc:###;
    public optional long long_zLoc:###;
    public optional int int_xLoc:xLoc;
    public optional int int_yLoc:yLoc;
    public optional int int_zLoc:zLoc;

    public int raw_xRot:yRot;
    public int raw_yRot:xRot;
    public int raw_headYaw:i;
#endif

#if version >= 1.17
    private optional double opt_xVel:###;
    private optional double opt_yVel:###;
    private optional double opt_zVel:###;
    private optional (org.bukkit.util.Vector) Vec3D opt_velocity:ap;
    public int tickCounter:tickCount;
#elseif version >= 1.14
    private optional double opt_xVel:###;
    private optional double opt_yVel:###;
    private optional double opt_zVel:###;
    private optional (org.bukkit.util.Vector) Vec3D opt_velocity:m;

  #if version >= 1.15
    public int tickCounter;
  #else
    public int tickCounter:n;
  #endif
#elseif version >= 1.9
    private optional double opt_xVel:n;
    private optional double opt_yVel:o;
    private optional double opt_zVel:p;
    private optional (org.bukkit.util.Vector) Vec3D opt_velocity:###;

    public int tickCounter:a;
#else
    public optional double opt_xVel:j;
    public optional double opt_yVel:k;
    public optional double opt_zVel:l;
    private optional (org.bukkit.util.Vector) Vec3D opt_velocity:###;

    public int tickCounter:m;
#endif

    <code>
    public double getXVel() {
        if (T.opt_xVel.isAvailable()) {
            return T.opt_xVel.getDouble(getRaw());
        } else {
            Object vel = T.opt_velocity.raw.get(getRaw());
            return com.bergerkiller.generated.net.minecraft.world.phys.Vec3DHandle.T.x.getDouble(vel);
        }
    }

    public double getYVel() {
        if (T.opt_yVel.isAvailable()) {
            return T.opt_yVel.getDouble(getRaw());
        } else {
            Object vel = T.opt_velocity.raw.get(getRaw());
            return com.bergerkiller.generated.net.minecraft.world.phys.Vec3DHandle.T.y.getDouble(vel);
        }
    }

    public double getZVel() {
        if (T.opt_zVel.isAvailable()) {
            return T.opt_zVel.getDouble(getRaw());
        } else {
            Object vel = T.opt_velocity.raw.get(getRaw());
            return com.bergerkiller.generated.net.minecraft.world.phys.Vec3DHandle.T.z.getDouble(vel);
        }
    }

    public void setXVel(double x) {
        if (T.opt_xVel.isAvailable()) {
            T.opt_xVel.setDouble(getRaw(), x);
        } else {
            Object vel = T.opt_velocity.raw.get(getRaw());
            double y = com.bergerkiller.generated.net.minecraft.world.phys.Vec3DHandle.T.y.getDouble(vel);
            double z = com.bergerkiller.generated.net.minecraft.world.phys.Vec3DHandle.T.z.getDouble(vel);
            setVelocity(x, y, z);
        }
    }

    public void setYVel(double y) {
        if (T.opt_yVel.isAvailable()) {
            T.opt_yVel.setDouble(getRaw(), y);
        } else {
            Object vel = T.opt_velocity.raw.get(getRaw());
            double x = com.bergerkiller.generated.net.minecraft.world.phys.Vec3DHandle.T.x.getDouble(vel);
            double z = com.bergerkiller.generated.net.minecraft.world.phys.Vec3DHandle.T.z.getDouble(vel);
            setVelocity(x, y, z);
        }
    }

    public void setZVel(double z) {
        if (T.opt_zVel.isAvailable()) {
            T.opt_zVel.setDouble(getRaw(), z);
        } else {
            Object vel = T.opt_velocity.raw.get(getRaw());
            double x = com.bergerkiller.generated.net.minecraft.world.phys.Vec3DHandle.T.x.getDouble(vel);
            double y = com.bergerkiller.generated.net.minecraft.world.phys.Vec3DHandle.T.y.getDouble(vel);
            setVelocity(x, y, z);
        }
    }

    public org.bukkit.util.Vector getVelocity() {
        if (T.opt_velocity.isAvailable()) {
            return T.opt_velocity.get(getRaw());
        } else {
            double x = T.opt_xVel.getDouble(getRaw());
            double y = T.opt_yVel.getDouble(getRaw());
            double z = T.opt_zVel.getDouble(getRaw());
            return new org.bukkit.util.Vector(x, y, z);
        }
    }

    public void setVelocity(org.bukkit.util.Vector velocity) {
        if (T.opt_velocity.isAvailable()) {
            T.opt_velocity.set(getRaw(), velocity);
        } else {
            T.opt_xVel.setDouble(getRaw(), velocity.getX());
            T.opt_yVel.setDouble(getRaw(), velocity.getY());
            T.opt_zVel.setDouble(getRaw(), velocity.getZ());
        }
    }

    public void setVelocity(double x, double y, double z) {
        if (T.opt_velocity.isAvailable()) {
            Object vel = com.bergerkiller.generated.net.minecraft.world.phys.Vec3DHandle.T.constr_x_y_z.raw.newInstance(x, y, z);
            T.opt_velocity.raw.set(getRaw(), vel);
        } else {
            T.opt_xVel.setDouble(getRaw(), x);
            T.opt_yVel.setDouble(getRaw(), y);
            T.opt_zVel.setDouble(getRaw(), z);
        }
    }
    </code>

    // Special handler for the hook to use on Tuinity server
    // Detect this by checking for the tuinity-added onTrack method
#if exists net.minecraft.server.level.EntityTrackerEntryState public final void onTrack(EntityPlayer player);
    public optional void onViewerAdded_tuinity:b((org.bukkit.entity.Player) EntityPlayer entityplayer);
    public optional void removeViewerFromMap_tuinity(Object entityplayer) {
        #require net.minecraft.server.level.EntityTrackerEntryState final java.util.Set<EntityPlayer> tuinity_trackedPlayers:trackedPlayers;
        java.util.Set set = instance#tuinity_trackedPlayers;
        set.remove(entityplayer);
    }
#else
    public optional void onViewerAdded_tuinity:###((org.bukkit.entity.Player) EntityPlayer entityplayer);
    public optional void removeViewerFromMap_tuinity:###(Object entityplayer);
#endif

#if version >= 1.14
    // On Minecraft 1.14 this resync distance check is no longer done
    public boolean checkTrackNeeded() {
        return true;
    }
#else
    // On Minecraft 1.13.2 this tracks the last position
    // When it changes by more than 16 blocks, rescan all players
    public boolean checkTrackNeeded() {
        #require net.minecraft.server.level.EntityTrackerEntryState private final net.minecraft.world.entity.Entity entity:tracker;
        #require net.minecraft.server.level.EntityTrackerEntryState private double prevX:q;
        #require net.minecraft.server.level.EntityTrackerEntryState private double prevY:r;
        #require net.minecraft.server.level.EntityTrackerEntryState private double prevZ:s;
        #require net.minecraft.server.level.EntityTrackerEntryState private boolean synched:isMoving;

        Entity entity = instance#entity;
        if (entity == null) {
            return true;
        }

        boolean isSynched = instance#synched;
        if (isSynched) {
            double lastSyncX = instance#prevX;
            double lastSyncY = instance#prevY;
            double lastSyncZ = instance#prevZ;
            double distance = entity.e(lastSyncX, lastSyncY, lastSyncZ);
            if (distance <= 16.0) {
                return false;
            }
        }

        // Update tracking data
        instance#prevX = entity.locX;
        instance#prevY = entity.locY;
        instance#prevZ = entity.locZ;
        instance#synched = true;
        return true;
    }
#endif

    // Moved to top on MC 1.14
#if version <= 1.13.2
    private final boolean isMobile:u;
#endif

    <code>
    // Minimal change of x/y/z position or rotation that is supported
    public static final double POSITION_STEP;
    public static final float ROTATION_STEP;
    public static final float ROTATION_STEP_INV;
    static {
        if (T.long_xLoc.isAvailable()) {
            POSITION_STEP = 1.0 / 4096.0;
        } else {
            POSITION_STEP = 1.0 / 32.0;
        }
        ROTATION_STEP = 360.0f / 256.0f;
        ROTATION_STEP_INV = 256.0f / 360.0f;
    }

    public static final boolean hasProtocolRotationChanged(float angle1, float angle2) {
        if (angle1 == angle2) {
            return false;
        }

        int prot_diff = com.bergerkiller.bukkit.common.utils.MathUtil.floor((angle2-angle1)*ROTATION_STEP_INV) & 0xFF;
        if (prot_diff > 0 && prot_diff < 255) {
            return true;
        }

        int prot1 = com.bergerkiller.bukkit.common.utils.MathUtil.floor(angle1*ROTATION_STEP_INV);
        int prot2 = com.bergerkiller.bukkit.common.utils.MathUtil.floor(angle2*ROTATION_STEP_INV);
        return ((prot1 - prot2) & 0xFF) != 0;
    }

    public static final int getProtocolRotation(float angle) {
        int protAngle = com.bergerkiller.bukkit.common.utils.MathUtil.floor(angle * ROTATION_STEP_INV) & 0xFF;
        if (protAngle >= 128) {
            protAngle -= 256;
        }
        return protAngle;
    }

    public static final float getRotationFromProtocol(int protocol) {
        int protAngle = protocol & 0xFF;
        if (protAngle >= 128) {
            protAngle -= 256;
        }
        return (float) protAngle * ROTATION_STEP;
    }

    // Performs protocol translation to set the synchronized x position coordinate
    public void setLocX(double x) {
        if (T.long_xLoc.isAvailable()) {
            T.long_xLoc.setLong(getRaw(), com.bergerkiller.bukkit.common.utils.MathUtil.longFloor(x * 4096.0));
        } else {
            T.int_xLoc.setInteger(getRaw(), com.bergerkiller.bukkit.common.utils.MathUtil.floor(x * 32.0));
        }
    }

    // Performs protocol translation to set the synchronized y position coordinate
    public void setLocY(double y) {
        if (T.long_yLoc.isAvailable()) {
            T.long_yLoc.setLong(getRaw(), com.bergerkiller.bukkit.common.utils.MathUtil.longFloor(y * 4096.0));
        } else {
            T.int_yLoc.setInteger(getRaw(), com.bergerkiller.bukkit.common.utils.MathUtil.floor(y * 32.0));
        }
    }

    // Performs protocol translation to set the synchronized z position coordinate
    public void setLocZ(double z) {
        if (T.long_zLoc.isAvailable()) {
            T.long_zLoc.setLong(getRaw(), com.bergerkiller.bukkit.common.utils.MathUtil.longFloor(z * 4096.0));
        } else {
            T.int_zLoc.setInteger(getRaw(), com.bergerkiller.bukkit.common.utils.MathUtil.floor(z * 32.0));
        }
    }

    // Performs protocol translation to set the synchronized yaw rotation
    public void setYaw(float yaw) {
        T.raw_yRot.setInteger(getRaw(), getProtocolRotation(yaw));
    }

    // Performs protocol translation to set the synchronized pitch rotation
    public void setPitch(float pitch) {
        T.raw_xRot.setInteger(getRaw(), getProtocolRotation(pitch));
    }

    // Performs protocol translation to set the synchronized head rotation
    public void setHeadYaw(float headYaw) {
        T.raw_headYaw.setInteger(getRaw(), getProtocolRotation(headYaw));
    }

    // Performs protocol translation to get the synchronized x position coordinate
    public double getLocX() {
        if (T.long_xLoc.isAvailable()) {
            return (double) T.long_xLoc.getLong(getRaw()) / 4096.0;
        } else {
            return (double) T.int_xLoc.getInteger(getRaw()) / 32.0;
        }
    }

    // Performs protocol translation to get the synchronized y position coordinate
    public double getLocY() {
        if (T.long_yLoc.isAvailable()) {
            return (double) T.long_yLoc.getLong(getRaw()) / 4096.0;
        } else {
            return (double) T.int_yLoc.getInteger(getRaw()) / 32.0;
        }
    }

    // Performs protocol translation to get the synchronized z position coordinate
    public double getLocZ() {
        if (T.long_zLoc.isAvailable()) {
            return (double) T.long_zLoc.getLong(getRaw()) / 4096.0;
        } else {
            return (double) T.int_zLoc.getInteger(getRaw()) / 32.0;
        }
    }

    // Performs protocol translation to get the synchronized yaw rotation
    public float getYaw() {
        return getRotationFromProtocol(T.raw_yRot.getInteger(getRaw()));
    }

    // Performs protocol translation to get the synchronized pitch rotation
    public float getPitch() {
        return getRotationFromProtocol(T.raw_xRot.getInteger(getRaw()));
    }

    // Performs protocol translation to get the synchronized head rotation
    public float getHeadYaw() {
        return getRotationFromProtocol(T.raw_headYaw.getInteger(getRaw()));
    }
    </code>

#if version >= 1.17
    private int timeSinceLocationSync:teleportDelay;
    private optional (List<org.bukkit.entity.Entity>) List<Entity> opt_passengers:lastPassengers;
    private optional (org.bukkit.entity.Entity) Entity opt_vehicle:###;
#elseif version >= 1.14
    private int timeSinceLocationSync:o;
    private optional (List<org.bukkit.entity.Entity>) List<Entity> opt_passengers:p;
    private optional (org.bukkit.entity.Entity) Entity opt_vehicle:###;
#elseif version >= 1.9
    private int timeSinceLocationSync:v;
    private optional (List<org.bukkit.entity.Entity>) List<Entity> opt_passengers:w;
    private optional (org.bukkit.entity.Entity) Entity opt_vehicle:###;
#else
    private int timeSinceLocationSync:v;
    private optional (List<org.bukkit.entity.Entity>) List<Entity> opt_passengers:###;
    private optional (org.bukkit.entity.Entity) Entity opt_vehicle:w;
#endif

#if version >= 1.14
    public (CommonPacket) Packet<?> getSpawnPacket() {
  #if version >= 1.17
        #require net.minecraft.server.level.EntityTrackerEntryState private final net.minecraft.world.entity.Entity entity;
  #else
        #require net.minecraft.server.level.EntityTrackerEntryState private final net.minecraft.world.entity.Entity entity:tracker;
  #endif
        Entity entity = instance#entity;
  #select version >=
  #case 1.18:   return entity.getAddEntityPacket();
  #case 1.17:   return entity.getPacket();
  #case 1.16.2: return entity.P();
  #case 1.16:   return entity.O();
  #case 1.15:   return entity.L();
  #case else:   return entity.N();
  #endselect
    }
#elseif version >= 1.9
    private (CommonPacket) Packet<?> getSpawnPacket:e();
#else
    private (CommonPacket) Packet getSpawnPacket:c();
#endif

#if version >= 1.18
    public void onTick:sendChanges();
#elseif version >= 1.14
    public void onTick:a();
#else
    public void onTick() {
        // Call track() with an empty list of players to scan
        instance.track(java.util.Collections.emptyList());
    }
#endif

}