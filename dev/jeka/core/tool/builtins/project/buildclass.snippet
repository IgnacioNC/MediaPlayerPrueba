import dev.jeka.core.api.java.JkJavaVersion;
import dev.jeka.core.api.project.JkProject;
import dev.jeka.core.api.testing.JkTestProcessor;
import dev.jeka.core.api.tooling.JkGitProcess;
import dev.jeka.core.tool.JkBean;
import dev.jeka.core.tool.builtins.project.ProjectJkBean;

class Build extends JkBean {

    final ProjectJkBean projectBean = getBean(ProjectJkBean.class).configure(this::configure);

    /*
     * Configures plugins to be bound to this command class. When this method is called, option
     * fields have already been injected from command line.
     */
    private void configure(JkProject project) {
        project
            .getConstruction()
                .setJvmTargetVersion(JkJavaVersion.V8)
                .getCompilation()
                    .configureDependencies(deps -> deps
                            .and("com.google.guava:guava:21.0")
                    )
                .__

                // this testing setup is almost default setting, this is here for illustration purpose
                // If default is ok for you, you can remove it.
                .getTesting()
                    .getCompilation().configureDependencies(deps -> deps
                            .and("org.junit.jupiter:junit-jupiter:5.8.1"))
                    .__
                    .getTestSelection()
                        .addIncludeStandardPatterns()
                    .__
                    .getTestProcessor()
                        .setForkingProcess(true)
                        .getEngineBehavior()
                            .setProgressDisplayer(JkTestProcessor.JkProgressOutputStyle.TREE)
                        .__
                    .__
                .__
            .__

            // Publication is only necessary if your project is being deployed on a binary repository.
            // Many projects as jee war jar, springboot application, tools, Graphical application
            // does not need this section at all.  In this case you can remove it.
            .getPublication()
                .setModuleId("your.group:your.project")
                .setVersion(() -> JkGitProcess.of().getVersionFromTag());  // Version inferred from Git
    }

    public void cleanPack() {
        clean(); projectBean.pack();
    }

}
